// <auto-generated />
using System;
using MABS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MABSAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230430142119_Schedules")]
    partial class Schedules
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorsFacilities", b =>
                {
                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("DoctorsFacilities");
                });

            modelBuilder.Entity("DoctorsSpecialties", b =>
                {
                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorsSpecialties");
                });

            modelBuilder.Entity("MABS.Domain.Models.DictionaryModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MABS.Domain.Models.DictionaryModels.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("char");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.HasIndex("TitleId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.DoctorEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CallerProfileId")
                        .HasColumnType("int");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallerProfileId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TypeId");

                    b.ToTable("DoctorEvents");
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.DoctorEventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DoctorEventType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Updated"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.DoctorStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DoctorStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CountryId")
                        .HasColumnType("char(2)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("FlatNumber")
                        .HasColumnType("int");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StreetTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StreetTypeId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.AddressStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AddressStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.AddressStreetType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("AddressStreetType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "",
                            ShortName = "Street"
                        },
                        new
                        {
                            Id = 2,
                            Name = "",
                            ShortName = "Avenue"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TaxIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.FacilityEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CallerProfileId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallerProfileId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("TypeId");

                    b.ToTable("FacilityEvents");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.FacilityEventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FacilityEventType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Updated"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Activated"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.FacilityStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FacilityStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Prepared"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.PatientModels.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MABS.Domain.Models.PatientModels.PatientEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CallerProfileId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallerProfileId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TypeId");

                    b.ToTable("PatientEvents");
                });

            modelBuilder.Entity("MABS.Domain.Models.PatientModels.PatientEventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PatientEventType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Updated"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.PatientModels.PatientStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PatientStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.ProfileEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CallerProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallerProfileId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TypeId");

                    b.ToTable("ProfileEvents");
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.ProfileEventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProfileEventType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Updated"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.ProfileStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProfileStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Prepared"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Locked"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.ProfileType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProfileType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Facility"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Patient"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.ScheduleModels.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidDateTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("StatusId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("MABS.Domain.Models.ScheduleModels.ScheduleEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CallerProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallerProfileId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TypeId");

                    b.ToTable("ScheduleEvents");
                });

            modelBuilder.Entity("MABS.Domain.Models.ScheduleModels.ScheduleEventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleEventType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("MABS.Domain.Models.ScheduleModels.ScheduleStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("DoctorsFacilities", b =>
                {
                    b.HasOne("MABS.Domain.Models.DoctorModels.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.FacilityModels.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorsSpecialties", b =>
                {
                    b.HasOne("MABS.Domain.Models.DoctorModels.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.DoctorModels.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.Doctor", b =>
                {
                    b.HasOne("MABS.Domain.Models.ProfileModels.Profile", "Profile")
                        .WithOne("Doctor")
                        .HasForeignKey("MABS.Domain.Models.DoctorModels.Doctor", "ProfileId");

                    b.HasOne("MABS.Domain.Models.DoctorModels.DoctorStatus", "Status")
                        .WithMany("Doctors")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.DoctorModels.Title", "Title")
                        .WithMany("Doctors")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Status");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.DoctorEvent", b =>
                {
                    b.HasOne("MABS.Domain.Models.ProfileModels.Profile", "CallerProfile")
                        .WithMany("DoctorEvents")
                        .HasForeignKey("CallerProfileId");

                    b.HasOne("MABS.Domain.Models.DoctorModels.Doctor", "Doctor")
                        .WithMany("Events")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.DoctorModels.DoctorEventType", "Type")
                        .WithMany("Events")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CallerProfile");

                    b.Navigation("Doctor");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.Address", b =>
                {
                    b.HasOne("MABS.Domain.Models.DictionaryModels.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId");

                    b.HasOne("MABS.Domain.Models.FacilityModels.Facility", "Facility")
                        .WithMany("Addresses")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.FacilityModels.AddressStatus", "Status")
                        .WithMany("Addresses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.FacilityModels.AddressStreetType", "StreetType")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Facility");

                    b.Navigation("Status");

                    b.Navigation("StreetType");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.Facility", b =>
                {
                    b.HasOne("MABS.Domain.Models.ProfileModels.Profile", "Profile")
                        .WithOne("Facility")
                        .HasForeignKey("MABS.Domain.Models.FacilityModels.Facility", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.FacilityModels.FacilityStatus", "Status")
                        .WithMany("Facilities")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.FacilityEvent", b =>
                {
                    b.HasOne("MABS.Domain.Models.ProfileModels.Profile", "CallerProfile")
                        .WithMany("FacilityEvents")
                        .HasForeignKey("CallerProfileId");

                    b.HasOne("MABS.Domain.Models.FacilityModels.Facility", "Facility")
                        .WithMany("Events")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.FacilityModels.FacilityEventType", "Type")
                        .WithMany("Events")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CallerProfile");

                    b.Navigation("Facility");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MABS.Domain.Models.PatientModels.Patient", b =>
                {
                    b.HasOne("MABS.Domain.Models.ProfileModels.Profile", "Profile")
                        .WithOne("Patient")
                        .HasForeignKey("MABS.Domain.Models.PatientModels.Patient", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.PatientModels.PatientStatus", "Status")
                        .WithMany("Patients")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MABS.Domain.Models.PatientModels.PatientEvent", b =>
                {
                    b.HasOne("MABS.Domain.Models.ProfileModels.Profile", "CallerProfile")
                        .WithMany("PatientEvents")
                        .HasForeignKey("CallerProfileId");

                    b.HasOne("MABS.Domain.Models.PatientModels.Patient", "Patient")
                        .WithMany("Events")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.PatientModels.PatientEventType", "Type")
                        .WithMany("Events")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CallerProfile");

                    b.Navigation("Patient");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.Profile", b =>
                {
                    b.HasOne("MABS.Domain.Models.ProfileModels.ProfileStatus", "Status")
                        .WithMany("Profiles")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.ProfileModels.ProfileType", "Type")
                        .WithMany("Profiles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.ProfileEvent", b =>
                {
                    b.HasOne("MABS.Domain.Models.ProfileModels.Profile", "CallerProfile")
                        .WithMany("CallerProfileEvents")
                        .HasForeignKey("CallerProfileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MABS.Domain.Models.ProfileModels.Profile", "Profile")
                        .WithMany("Events")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.ProfileModels.ProfileEventType", "Type")
                        .WithMany("Events")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CallerProfile");

                    b.Navigation("Profile");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MABS.Domain.Models.ScheduleModels.Schedule", b =>
                {
                    b.HasOne("MABS.Domain.Models.DoctorModels.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.FacilityModels.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.ScheduleModels.ScheduleStatus", "Status")
                        .WithMany("Schedules")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Facility");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MABS.Domain.Models.ScheduleModels.ScheduleEvent", b =>
                {
                    b.HasOne("MABS.Domain.Models.ProfileModels.Profile", "CallerProfile")
                        .WithMany()
                        .HasForeignKey("CallerProfileId");

                    b.HasOne("MABS.Domain.Models.ScheduleModels.Schedule", "Schedule")
                        .WithMany("Events")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MABS.Domain.Models.ScheduleModels.ScheduleEventType", "Type")
                        .WithMany("Events")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CallerProfile");

                    b.Navigation("Schedule");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MABS.Domain.Models.DictionaryModels.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.Doctor", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.DoctorEventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.DoctorStatus", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MABS.Domain.Models.DoctorModels.Title", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.AddressStatus", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.AddressStreetType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.Facility", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.FacilityEventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MABS.Domain.Models.FacilityModels.FacilityStatus", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("MABS.Domain.Models.PatientModels.Patient", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MABS.Domain.Models.PatientModels.PatientEventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MABS.Domain.Models.PatientModels.PatientStatus", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.Profile", b =>
                {
                    b.Navigation("CallerProfileEvents");

                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("DoctorEvents");

                    b.Navigation("Events");

                    b.Navigation("Facility")
                        .IsRequired();

                    b.Navigation("FacilityEvents");

                    b.Navigation("Patient")
                        .IsRequired();

                    b.Navigation("PatientEvents");
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.ProfileEventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.ProfileStatus", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("MABS.Domain.Models.ProfileModels.ProfileType", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("MABS.Domain.Models.ScheduleModels.Schedule", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MABS.Domain.Models.ScheduleModels.ScheduleEventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MABS.Domain.Models.ScheduleModels.ScheduleStatus", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
